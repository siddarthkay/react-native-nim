#!/bin/bash
# Automated build script for Nim -> React Native
# Compiles Nim code and generates all bindings automatically

set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$SCRIPT_DIR/.."
NIM_DIR="$PROJECT_ROOT/nim"
BRIDGE_DIR="$PROJECT_ROOT/modules/nim-bridge"

echo "🔨 Building Nim-React Native Bridge..."

# Step 1: Compile Nim to C
echo "📦 Compiling Nim code..."
cd "$NIM_DIR"

# Skip creating Nim file if it already exists
if [ ! -f "nimbridge.nim" ]; then
    echo "Creating sample nimbridge.nim..."
    cat > nimbridge.nim << 'EOF'
# Example Nim module with exported functions
import strutils, json

proc helloWorld*(): cstring {.exportc.} =
  return "Hello from Nim!"

proc addNumbers*(a: cint, b: cint): cint {.exportc.} =
  return a + b

proc getSystemInfo*(): cstring {.exportc.} =
  return "Nim 2.0 on iOS"

proc mobileFibonacci*(n: cint): cint {.exportc.} =
  if n <= 1: return n
  return mobileFibonacci(n - 1) + mobileFibonacci(n - 2)

proc mobileIsPrime*(n: cint): cint {.exportc.} =
  if n <= 1: return 0
  for i in 2..<n:
    if n mod i == 0: return 0
  return 1

proc mobileFactorize*(n: cint): cstring {.exportc.} =
  var factors: seq[int] = @[]
  var num = n.int
  var d = 2
  while d * d <= num:
    while num mod d == 0:
      factors.add(d)
      num = num div d
    d += 1
  if num > 1:
    factors.add(num)
  return $(factors)

proc mobileCreateUser*(id: cint, name: cstring, email: cstring): cstring {.exportc.} =
  let userJson = %* {"id": id, "name": $name, "email": $email}
  return $(userJson)

proc mobileValidateEmail*(email: cstring): cint {.exportc.} =
  let emailStr = $email
  if "@" in emailStr and "." in emailStr:
    return 1
  return 0

proc getNimCoreVersion*(): cstring {.exportc.} =
  return "1.0.0"

proc mobileNimInit*() {.exportc.} =
  discard

proc mobileNimShutdown*() {.exportc.} =
  discard
EOF
fi

# Compile for iOS
nim c --noMain --os:ios --cpu:arm64 \
      --nimcache:cache \
      --compileOnly \
      --genScript \
      --header:nimbridge.h \
      nimbridge.nim

# Step 2: Generate bindings automatically
echo "🤖 Generating bindings..."
python3 "$SCRIPT_DIR/generate_bindings.py"

# Step 3: Copy generated headers
echo "📋 Copying headers..."
cp cache/nimbridge.h "$BRIDGE_DIR/ios/main.h" 2>/dev/null || true

# Step 4: Create iOS-specific C++ implementation
echo "🔧 Creating platform-specific implementations..."

# The C++ implementation is now auto-generated by generate_bindings.py
# Just ensure the manual nim_functions.cpp exists with actual implementations

# Step 5: Update package.json if needed
echo "📝 Updating build configuration..."

cat > "$BRIDGE_DIR/nim-bridge.podspec" << 'EOF'
Pod::Spec.new do |s|
  s.name           = "NimBridge"
  s.version        = "1.0.0"
  s.summary        = "Nim bridge for React Native"
  s.homepage       = "https://github.com/example/nim-bridge"
  s.license        = "MIT"
  s.authors        = { "Your Name" => "you@example.com" }
  s.platforms      = { :ios => "12.0" }
  s.source         = { :git => "https://github.com/example/nim-bridge.git", :tag => "#{s.version}" }
  s.source_files   = "ios/**/*.{h,m,mm,cpp}"
  s.requires_arc   = true
  s.dependency "React-Core"
end
EOF

echo "✅ Build complete!"
echo ""
echo "Generated files:"
echo "  - $BRIDGE_DIR/ios/nim_functions.h (C++ declarations)"
echo "  - $BRIDGE_DIR/ios/NimBridge_generated.mm (Objective-C++ bridge)"
echo "  - $BRIDGE_DIR/src/NimBridge.types.ts (TypeScript interface)"
echo ""
echo "Next steps:"
echo "  1. Run 'cd ios && pod install'"
echo "  2. Run 'npm run ios' to rebuild the app"