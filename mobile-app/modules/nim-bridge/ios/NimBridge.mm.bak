#import "NimBridge.h"

// Include the generated Nim header
#include "main.h"

@implementation NimBridge

RCT_EXPORT_MODULE()

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        // Initialize Nim runtime
        NimMain();
        mobileNimInit();
    }
    return self;
}

- (void)dealloc
{
    mobileNimShutdown();
}

// Core API methods
RCT_EXPORT_SYNCHRONOUS_TYPED_METHOD(NSString *, helloWorld)
{
    NCSTRING result = helloWorld();
    return result ? [NSString stringWithUTF8String:result] : @"";
}

RCT_EXPORT_SYNCHRONOUS_TYPED_METHOD(NSNumber *, addNumbers:(nonnull NSNumber *)a withB:(nonnull NSNumber *)b)
{
    int result = addNumbers([a intValue], [b intValue]);
    return @(result);
}

RCT_EXPORT_SYNCHRONOUS_TYPED_METHOD(NSString *, getSystemInfo)
{
    NCSTRING result = getSystemInfo();
    return result ? [NSString stringWithUTF8String:result] : @"";
}

// Math operations
RCT_EXPORT_SYNCHRONOUS_TYPED_METHOD(NSNumber *, fibonacci:(nonnull NSNumber *)n)
{
    int result = mobileFibonacci([n intValue]);
    return @(result);
}

RCT_EXPORT_SYNCHRONOUS_TYPED_METHOD(NSNumber *, isPrime:(nonnull NSNumber *)n)
{
    int result = mobileIsPrime([n intValue]);
    return @(result);
}

RCT_EXPORT_SYNCHRONOUS_TYPED_METHOD(NSString *, factorize:(nonnull NSNumber *)n)
{
    NCSTRING result = mobileFactorize([n intValue]);
    return result ? [NSString stringWithUTF8String:result] : @"";
}

// Data operations
RCT_EXPORT_SYNCHRONOUS_TYPED_METHOD(NSString *, createUser:(nonnull NSNumber *)userId withName:(nonnull NSString *)name withEmail:(nonnull NSString *)email)
{
    NCSTRING result = mobileCreateUser([userId intValue], (NCSTRING)[name UTF8String], (NCSTRING)[email UTF8String]);
    return result ? [NSString stringWithUTF8String:result] : @"";
}

RCT_EXPORT_SYNCHRONOUS_TYPED_METHOD(NSNumber *, validateEmail:(nonnull NSString *)email)
{
    int result = mobileValidateEmail((NCSTRING)[email UTF8String]);
    return @(result);
}

RCT_EXPORT_SYNCHRONOUS_TYPED_METHOD(NSString *, getVersion)
{
    NCSTRING result = getNimCoreVersion();
    return result ? [NSString stringWithUTF8String:result] : @"";
}

// Don't compile this code when we build for the old architecture.
#ifdef RCT_NEW_ARCH_ENABLED
- (std::shared_ptr<facebook::react::TurboModule>)getTurboModule:
    (const facebook::react::ObjCTurboModule::InitParams &)params
{
    return std::make_shared<facebook::react::NativeNimBridgeSpecJSI>(params);
}
#endif

@end