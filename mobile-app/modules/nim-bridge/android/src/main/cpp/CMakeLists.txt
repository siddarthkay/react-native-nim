cmake_minimum_required(VERSION 3.13)
project(NimBridge)

set(PACKAGE_NAME "nim_functions")

# Include Nim compiled C files (generated by Nim compiler)
# Try multiple possible locations for the cache directory
set(POSSIBLE_CACHE_DIRS
    "../../../../../../nim/cache_android"
    "${CMAKE_CURRENT_SOURCE_DIR}/../../../../../../nim/cache_android"
    "${CMAKE_SOURCE_DIR}/../../../nim/cache_android"
)

set(NIM_C_FILES "")
foreach(CACHE_DIR ${POSSIBLE_CACHE_DIRS})
    file(GLOB_RECURSE FOUND_FILES "${CACHE_DIR}/*.c")
    if(FOUND_FILES)
        list(APPEND NIM_C_FILES ${FOUND_FILES})
        message(STATUS "Found Nim C files in: ${CACHE_DIR}")
        break()
    endif()
endforeach()

if(NOT NIM_C_FILES)
    message(FATAL_ERROR "No Nim C files found in any of these locations: ${POSSIBLE_CACHE_DIRS}")
endif()

add_library(
        ${PACKAGE_NAME}
        SHARED
        NimBridge.cpp
        ${NIM_C_FILES}
)

# Include directories - determine the correct cache directory
set(NIM_CACHE_DIR "")
foreach(CACHE_DIR ${POSSIBLE_CACHE_DIRS})
    if(EXISTS "${CACHE_DIR}")
        set(NIM_CACHE_DIR "${CACHE_DIR}")
        break()
    endif()
endforeach()

# Get the nim source directory (parent of cache directory)
get_filename_component(NIM_SOURCE_DIR "${NIM_CACHE_DIR}" DIRECTORY)

target_include_directories(
        ${PACKAGE_NAME}
        PRIVATE
        .
        "${NIM_CACHE_DIR}"
        "${NIM_SOURCE_DIR}"
)

# Compiler flags for Nim - set NIM_INTBITS based on target architecture
if(ANDROID_ABI STREQUAL "arm64-v8a" OR ANDROID_ABI STREQUAL "x86_64")
    target_compile_definitions(${PACKAGE_NAME} PRIVATE 
        -D_GNU_SOURCE
        -DNIM_INTBITS=64
    )
else()
    # 32-bit architectures (armeabi-v7a, x86)
    target_compile_definitions(${PACKAGE_NAME} PRIVATE 
        -D_GNU_SOURCE
        -DNIM_INTBITS=32
    )
endif()

# Additional compiler flags to handle Nim code properly
target_compile_options(${PACKAGE_NAME} PRIVATE
    -Wno-unused-function
    -Wno-unused-variable
    -fno-strict-aliasing
)

# Link libraries
target_link_libraries(
        ${PACKAGE_NAME}
        android
        log
        m
        atomic
)