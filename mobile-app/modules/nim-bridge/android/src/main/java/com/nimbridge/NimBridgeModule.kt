// Auto-generated Kotlin module for Nim bridge
// DO NOT EDIT MANUALLY - Generated by tools/generate_bindings.py
// This file will be overwritten when bindings are regenerated

package com.nimbridge

import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.module.annotations.ReactModule
import com.nimbridge.NativeNimBridgeSpec

@ReactModule(name = NimBridgeModule.NAME)
class NimBridgeModule(reactContext: ReactApplicationContext) : NativeNimBridgeSpec(reactContext) {

    companion object {
        const val NAME = "NimBridge"

        init {
            try {
                System.loadLibrary("nim_functions")
                android.util.Log.d("NimBridge", "Native library nim_functions loaded successfully")
            } catch (e: Exception) {
                android.util.Log.e("NimBridge", "Failed to load native library nim_functions: ${e.message}")
                e.printStackTrace()
            }
        }

        @JvmStatic
        private external fun nativeHelloWorld(): String
        @JvmStatic
        private external fun nativeAddNumbers(a: Int, b: Int): Int
        @JvmStatic
        private external fun nativeGetSystemInfo(): String
        @JvmStatic
        private external fun nativeMobileFibonacci(n: Int): Long
        @JvmStatic
        private external fun nativeMobileIsPrime(n: Int): Int
        @JvmStatic
        private external fun nativeMobileFactorize(n: Int): String
        @JvmStatic
        private external fun nativeMobileCreateUser(id: Int, name: String, email: String): String
        @JvmStatic
        private external fun nativeMobileValidateEmail(email: String): Int
        @JvmStatic
        private external fun nativeGetNimCoreVersion(): String
    }
    
    override fun getName(): String = NAME


    override fun helloWorld(): String {
        return try {
            nativeHelloWorld()
        } catch (e: Exception) {
            "Error: ${e.message}"
        }
    }

    override fun addNumbers(a: Double, b: Double): Double {
        return try {
            nativeAddNumbers(a.toInt(), b.toInt()).toDouble()
        } catch (e: Exception) {
            0.0
        }
    }

    override fun getSystemInfo(): String {
        return try {
            nativeGetSystemInfo()
        } catch (e: Exception) {
            "Error: ${e.message}"
        }
    }

    override fun fibonacci(n: Double): Double {
        return try {
            nativeMobileFibonacci(n.toInt()).toDouble()
        } catch (e: Exception) {
            0.0
        }
    }

    override fun isPrime(n: Double): Boolean {
        return try {
            nativeMobileIsPrime(n.toInt()) != 0
        } catch (e: Exception) {
            false
        }
    }

    override fun factorize(n: Double): String {
        return try {
            nativeMobileFactorize(n.toInt())
        } catch (e: Exception) {
            "Error: ${e.message}"
        }
    }

    override fun createUser(id: Double, name: String, email: String): String {
        return try {
            nativeMobileCreateUser(id.toInt(), name, email)
        } catch (e: Exception) {
            "Error: ${e.message}"
        }
    }

    override fun validateEmail(email: String): Boolean {
        return try {
            nativeMobileValidateEmail(email) != 0
        } catch (e: Exception) {
            false
        }
    }

    override fun getVersion(): String {
        return try {
            nativeGetNimCoreVersion()
        } catch (e: Exception) {
            "Error: ${e.message}"
        }
    }
}