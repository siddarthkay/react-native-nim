/* Generated by Nim Compiler v2.2.0 */
/* Compiled for: iOS, arm64, clang */
/* Command for C compiler:
   clang++ -c -std=gnu++17 -funsigned-char  -pthread -fPIC  -O3 -fno-ident  -fPIC  -I/opt/homebrew/Cellar/nim/2.2.0/nim/lib -I/Users/siddarthkumar/code/siddarthkay/react-native-nim/nim-core/src -o /Users/siddarthkumar/code/siddarthkay/react-native-nim/bindings/ios/@m..@s..@s..@s..@s..@s..@s..@sopt@shomebrew@sCellar@snim@s2.2.0@snim@slib@sstd@sassertions.nim.cpp.o /Users/siddarthkumar/code/siddarthkay/react-native-nim/bindings/ios/@m..@s..@s..@s..@s..@s..@s..@sopt@shomebrew@sCellar@snim@s2.2.0@snim@slib@sstd@sassertions.nim.cpp */
#define NIM_INTBITS 64
#define NIM_EmulateOverflowChecks

#include "nimbase.h"
#include <exception>
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
struct NimStrPayload;
struct NimStringV2;
struct tyObject_AssertionDefect__X2fFcb4l5PDxZRUdSuc2kA;
struct tyObject_Defect__3XF2pFjTmVrdJNEfAv9c60w;
struct Exception;
struct RootObj;
struct TNimTypeV2;
struct tySequence__U3NvoVpKEobw8JVQGjnwkQ;
struct tySequence__U3NvoVpKEobw8JVQGjnwkQ_Content;
struct tyObject_StackTraceEntry__XJPlpMU9cDRJgRZvaiJYQVA;
struct NimStrPayload {
	NI cap;
	NIM_CHAR data[SEQ_DECL_SIZE];
};
struct NimStringV2 {
	NI len;
	NimStrPayload* p;
};
struct TNimTypeV2 {
	void* destructor;
	NI size;
	NI16 align;
	NI16 depth;
	NU32* display;
	void* traceImpl;
	void* typeInfoV1;
	NI flags;
	void** vTable;
};
struct RootObj {
	TNimTypeV2* m_type;
};
struct tySequence__U3NvoVpKEobw8JVQGjnwkQ {
  NI len; tySequence__U3NvoVpKEobw8JVQGjnwkQ_Content* p;
};
struct Exception : public RootObj {
	Exception* parent;
	NCSTRING name;
	NimStringV2 message;
	tySequence__U3NvoVpKEobw8JVQGjnwkQ trace;
	Exception* up;
};
struct tyObject_Defect__3XF2pFjTmVrdJNEfAv9c60w : public Exception {
};
struct tyObject_AssertionDefect__X2fFcb4l5PDxZRUdSuc2kA : public tyObject_Defect__3XF2pFjTmVrdJNEfAv9c60w {
};
struct tyObject_StackTraceEntry__XJPlpMU9cDRJgRZvaiJYQVA {
	NCSTRING procname;
	NI line;
	NCSTRING filename;
};
struct tySequence__U3NvoVpKEobw8JVQGjnwkQ_Content { NI cap; tyObject_StackTraceEntry__XJPlpMU9cDRJgRZvaiJYQVA data[SEQ_DECL_SIZE]; };
N_LIB_PRIVATE N_NOINLINE(void, raiseAssert__stdZassertions_u27)(NimStringV2 msg_p0) __attribute__((noreturn));
static N_INLINE(void, sysFatal__stdZassertions_u29)(NimStringV2 message_p1) __attribute__((noreturn));
N_LIB_PRIVATE N_NIMCALL(void*, nimNewObj)(NI size_p0, NI alignment_p1);
N_LIB_PRIVATE N_NIMCALL(void, eqwasMoved___system_u2606)(NimStringV2& dest_p0);
N_LIB_PRIVATE N_NIMCALL(void, raiseExceptionEx)(Exception* e_p0, NCSTRING ename_p1, NCSTRING procname_p2, NCSTRING filename_p3, NI line_p4);
N_LIB_PRIVATE N_NOCONV(void, deallocShared)(void* p_p0);
N_LIB_PRIVATE N_NIMCALL(NimStringV2, eqdup___system_u2612)(NimStringV2 src_p0);
extern TNimTypeV2 NTIv2__X2fFcb4l5PDxZRUdSuc2kA_;
static N_INLINE(void, sysFatal__stdZassertions_u29)(NimStringV2 message_p1) {
	std::exception_ptr T2_;
	tyObject_AssertionDefect__X2fFcb4l5PDxZRUdSuc2kA* T3_;
	NimStringV2 blitTmp;
	try {
	T3_ = NIM_NIL;
	T3_ = (tyObject_AssertionDefect__X2fFcb4l5PDxZRUdSuc2kA*) nimNewObj(sizeof(tyObject_AssertionDefect__X2fFcb4l5PDxZRUdSuc2kA), NIM_ALIGNOF(tyObject_AssertionDefect__X2fFcb4l5PDxZRUdSuc2kA));
	(*T3_).m_type = (&NTIv2__X2fFcb4l5PDxZRUdSuc2kA_);
	(*T3_).name = "AssertionDefect";
	blitTmp = message_p1;
	eqwasMoved___system_u2606((*(&message_p1)));
	(*T3_).message = blitTmp;
	raiseExceptionEx((Exception*)T3_, "AssertionDefect", "sysFatal", "fatal.nim", 53);
	}
	catch (Exception* T3_) {
	T2_ = std::current_exception();
	}
	catch (...) {
		T2_ = std::current_exception();
	}
	{
		if (message_p1.p && !(message_p1.p->cap & NIM_STRLIT_FLAG)) {
 deallocShared(message_p1.p);
}
		if (T2_) std::rethrow_exception(T2_);
	}
}
N_LIB_PRIVATE N_NOINLINE(void, raiseAssert__stdZassertions_u27)(NimStringV2 msg_p0) {
	NimStringV2 colontmpD_;
	colontmpD_.len = 0; colontmpD_.p = NIM_NIL;
	colontmpD_ = eqdup___system_u2612(msg_p0);
	sysFatal__stdZassertions_u29(colontmpD_);
}
N_LIB_PRIVATE N_NIMCALL(void, failedAssertImpl__stdZassertions_u203)(NimStringV2 msg_p0) {
	raiseAssert__stdZassertions_u27(msg_p0);
}
