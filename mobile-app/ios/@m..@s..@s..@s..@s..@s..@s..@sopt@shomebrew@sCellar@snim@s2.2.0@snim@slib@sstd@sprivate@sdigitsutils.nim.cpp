/* Generated by Nim Compiler v2.2.0 */
/* Compiled for: iOS, arm64, clang */
/* Command for C compiler:
   clang++ -c -std=gnu++17 -funsigned-char  -pthread -fPIC  -O3 -fno-ident  -fPIC  -I/opt/homebrew/Cellar/nim/2.2.0/nim/lib -I/Users/siddarthkumar/code/siddarthkay/react-native-nim/nim-core/src -o /Users/siddarthkumar/code/siddarthkay/react-native-nim/bindings/ios/@m..@s..@s..@s..@s..@s..@s..@sopt@shomebrew@sCellar@snim@s2.2.0@snim@slib@sstd@sprivate@sdigitsutils.nim.cpp.o /Users/siddarthkumar/code/siddarthkay/react-native-nim/bindings/ios/@m..@s..@s..@s..@s..@s..@s..@sopt@shomebrew@sCellar@snim@s2.2.0@snim@slib@sstd@sprivate@sdigitsutils.nim.cpp */
#define NIM_INTBITS 64
#define NIM_EmulateOverflowChecks

#include "nimbase.h"
#include <string.h>
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
struct NimStrPayload;
struct NimStringV2;
struct NimStrPayload {
	NI cap;
	NIM_CHAR data[SEQ_DECL_SIZE];
};
struct NimStringV2 {
	NI len;
	NimStrPayload* p;
};
typedef NIM_CHAR tyArray__PbS9a6gkxCuxWEnFq4lOU9aw[24];
typedef NIM_CHAR tyArray__38Z69amCaoywES5tRmClBSw[200];
N_LIB_PRIVATE N_NOINLINE(void, raiseOverflow)(void);
static N_INLINE(void, nimAddCharV1)(NimStringV2& s_p0, NIM_CHAR c_p1);
N_LIB_PRIVATE N_NIMCALL(void, prepareAdd)(NimStringV2& s_p0, NI addLen_p1);
static N_INLINE(NIM_BOOL, nimAddInt)(NI a_p0, NI b_p1, NI* res_p2);
N_LIB_PRIVATE N_NIMCALL(void, addInt__stdZprivateZdigitsutils_u175)(NimStringV2& result_p0, NU64 x_p1);
static N_INLINE(void, addIntImpl__stdZprivateZdigitsutils_u55)(NimStringV2& result_p0, NU64 x_p1);
N_LIB_PRIVATE N_NOINLINE(void, raiseRangeErrorNoArgs)(void);
N_LIB_PRIVATE N_NOINLINE(void, raiseIndexError2)(NI i_p0, NI n_p1);
static N_INLINE(NIM_BOOL, nimSubInt)(NI a_p0, NI b_p1, NI* res_p2);
static N_INLINE(void, addChars__stdZprivateZdigitsutils_u98)(NimStringV2& result_p0, tyArray__PbS9a6gkxCuxWEnFq4lOU9aw x_p1, NI start_p2, NI n_p3);
N_LIB_PRIVATE N_NOINLINE(void, raiseRangeErrorI)(NI64 i_p0, NI64 a_p1, NI64 b_p2);
N_LIB_PRIVATE N_NIMCALL(void, setLengthStrV2)(NimStringV2& s_p0, NI newLen_p1);
static N_INLINE(void, copyMem__system_u1726)(void* dest_p0, void* source_p1, NI size_p2);
static N_INLINE(void, nimCopyMem)(void* dest_p0, void* source_p1, NI size_p2);
N_LIB_PRIVATE NIM_CONST tyArray__38Z69amCaoywES5tRmClBSw digits100__stdZprivateZdigitsutils_u2 = {48,
48,
48,
49,
48,
50,
48,
51,
48,
52,
48,
53,
48,
54,
48,
55,
48,
56,
48,
57,
49,
48,
49,
49,
49,
50,
49,
51,
49,
52,
49,
53,
49,
54,
49,
55,
49,
56,
49,
57,
50,
48,
50,
49,
50,
50,
50,
51,
50,
52,
50,
53,
50,
54,
50,
55,
50,
56,
50,
57,
51,
48,
51,
49,
51,
50,
51,
51,
51,
52,
51,
53,
51,
54,
51,
55,
51,
56,
51,
57,
52,
48,
52,
49,
52,
50,
52,
51,
52,
52,
52,
53,
52,
54,
52,
55,
52,
56,
52,
57,
53,
48,
53,
49,
53,
50,
53,
51,
53,
52,
53,
53,
53,
54,
53,
55,
53,
56,
53,
57,
54,
48,
54,
49,
54,
50,
54,
51,
54,
52,
54,
53,
54,
54,
54,
55,
54,
56,
54,
57,
55,
48,
55,
49,
55,
50,
55,
51,
55,
52,
55,
53,
55,
54,
55,
55,
55,
56,
55,
57,
56,
48,
56,
49,
56,
50,
56,
51,
56,
52,
56,
53,
56,
54,
56,
55,
56,
56,
56,
57,
57,
48,
57,
49,
57,
50,
57,
51,
57,
52,
57,
53,
57,
54,
57,
55,
57,
56,
57,
57}
;
static N_INLINE(NIM_BOOL, nimAddInt)(NI a_p0, NI b_p1, NI* res_p2) {
	NIM_BOOL result;
	result = (NIM_BOOL)0;
	NI r = ((NI) ((NU)((NU64)(((NU) (a_p0))) + (NU64)(((NU) (b_p1))))));
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = (((NI)0) <= (NI)(r ^ a_p0));
		if (T3_) goto LA4_;
		T3_ = (((NI)0) <= (NI)(r ^ b_p1));
LA4_: ;
		if (!T3_) goto LA5_;
{		(*res_p2) = r;
}	}
	goto LA1_;
LA5_: ;
	{
		result = NIM_TRUE;
	}
LA1_: ;
	return result;
}
static N_INLINE(void, nimAddCharV1)(NimStringV2& s_p0, NIM_CHAR c_p1) {
	NI TM__J7BLF9cgvwzEso7aEL9cCOKw_2;
	prepareAdd((*(&s_p0)), ((NI)1));
	(*s_p0.p).data[s_p0.len] = c_p1;
	if (nimAddInt(s_p0.len, ((NI)1), &TM__J7BLF9cgvwzEso7aEL9cCOKw_2)) { raiseOverflow(); 	};
	s_p0.len = (NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_2);
	(*s_p0.p).data[s_p0.len] = 0;
}
static N_INLINE(NIM_BOOL, nimSubInt)(NI a_p0, NI b_p1, NI* res_p2) {
	NIM_BOOL result;
	result = (NIM_BOOL)0;
	NI r = ((NI) ((NU)((NU64)(((NU) (a_p0))) - (NU64)(((NU) (b_p1))))));
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = (((NI)0) <= (NI)(r ^ a_p0));
		if (T3_) goto LA4_;
		T3_ = (((NI)0) <= (NI)(r ^ (NI)((NU64) ~(b_p1))));
LA4_: ;
		if (!T3_) goto LA5_;
{		(*res_p2) = r;
}	}
	goto LA1_;
LA5_: ;
	{
		result = NIM_TRUE;
	}
LA1_: ;
	return result;
}
static N_INLINE(void, nimCopyMem)(void* dest_p0, void* source_p1, NI size_p2) {
	auto T1_ = memcpy(dest_p0, source_p1, ((size_t) (size_p2)));
}
static N_INLINE(void, copyMem__system_u1726)(void* dest_p0, void* source_p1, NI size_p2) {
	nimCopyMem(dest_p0, source_p1, size_p2);
}
static N_INLINE(void, addChars__stdZprivateZdigitsutils_u98)(NimStringV2& result_p0, tyArray__PbS9a6gkxCuxWEnFq4lOU9aw x_p1, NI start_p2, NI n_p3) {
	NI TM__J7BLF9cgvwzEso7aEL9cCOKw_8;
	NI old = result_p0.len;
	if (nimAddInt(old, n_p3, &TM__J7BLF9cgvwzEso7aEL9cCOKw_8)) { raiseOverflow(); 	};
	if (((NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_8)) < ((NI)0) || ((NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_8)) > ((NI)IL64(9223372036854775807))){ raiseRangeErrorI((NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_8), ((NI)0), ((NI)IL64(9223372036854775807))); 	}
	setLengthStrV2(result_p0, ((NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_8)));
	if (old < 0 || old >= result_p0.len){ raiseIndexError2(old,result_p0.len-1); 	}
	if ((NU)(start_p2) > (NU)(23)){ raiseIndexError2(start_p2, 23); 	}
	if ((n_p3) < ((NI)0) || (n_p3) > ((NI)IL64(9223372036854775807))){ raiseRangeErrorI(n_p3, ((NI)0), ((NI)IL64(9223372036854775807))); 	}
	copyMem__system_u1726(((void*) ((&result_p0.p->data[old]))), ((void*) ((&x_p1[(start_p2)- 0]))), (n_p3));
}
static N_INLINE(void, addIntImpl__stdZprivateZdigitsutils_u55)(NimStringV2& result_p0, NU64 x_p1) {
	tyArray__PbS9a6gkxCuxWEnFq4lOU9aw tmp;
	NI TM__J7BLF9cgvwzEso7aEL9cCOKw_9;
	NU64 num = x_p1;
	NI next = ((NI)23);
	{
		while (1) {
			NI TM__J7BLF9cgvwzEso7aEL9cCOKw_3;
			NI TM__J7BLF9cgvwzEso7aEL9cCOKw_4;
			NI TM__J7BLF9cgvwzEso7aEL9cCOKw_5;
			if (!((NU64)(100ULL) <= (NU64)(num))) goto LA2;
			NU64 originNum = num;
			num = (NU64)((NU64)(num) / (NU64)(100ULL));
			if ((NU64)((NU64)((NU64)((NU64)(originNum) - (NU64)((NU64)((NU64)(num) * (NU64)(100ULL))))) << (NU64)(((NI)1))) > (NU64)(((NI16)32767))){ raiseRangeErrorNoArgs(); 			}
			NI16 index = ((NI16) ((NU64)((NU64)((NU64)((NU64)(originNum) - (NU64)((NU64)((NU64)(num) * (NU64)(100ULL))))) << (NU64)(((NI)1)))));
			if ((NU)(next) > (NU)(23)){ raiseIndexError2(next, 23); 			}
			if (nimAddInt(index, ((NI16)1), &TM__J7BLF9cgvwzEso7aEL9cCOKw_3)) { raiseOverflow(); 			};
			if (TM__J7BLF9cgvwzEso7aEL9cCOKw_3 < -32768 || TM__J7BLF9cgvwzEso7aEL9cCOKw_3 > 32767){ raiseOverflow(); 			}
			if ((NU)((NI16)(TM__J7BLF9cgvwzEso7aEL9cCOKw_3)) > (NU)(199)){ raiseIndexError2((NI16)(TM__J7BLF9cgvwzEso7aEL9cCOKw_3), 199); 			}
			tmp[(next)- 0] = digits100__stdZprivateZdigitsutils_u2[((NI16)(TM__J7BLF9cgvwzEso7aEL9cCOKw_3))- 0];
			if (nimSubInt(next, ((NI)1), &TM__J7BLF9cgvwzEso7aEL9cCOKw_4)) { raiseOverflow(); 			};
			if ((NU)((NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_4)) > (NU)(23)){ raiseIndexError2((NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_4), 23); 			}
			if ((NU)(index) > (NU)(199)){ raiseIndexError2(index, 199); 			}
			tmp[((NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_4))- 0] = digits100__stdZprivateZdigitsutils_u2[(index)- 0];
			if (nimSubInt(next, ((NI)2), &TM__J7BLF9cgvwzEso7aEL9cCOKw_5)) { raiseOverflow(); 			};
			next = (NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_5);
		} LA2: ;
	}
	{
		if (!((NU64)(num) < (NU64)(10ULL))) goto LA5_;
{		if ((NU)(next) > (NU)(23)){ raiseIndexError2(next, 23); 		}
		tmp[(next)- 0] = ((NIM_CHAR) (((NI) ((NU8)((NU8)(((NU8)48)) + (NU8)(((NU8) (num))))))));
}	}
	goto LA3_;
LA5_: ;
	{
		NI TM__J7BLF9cgvwzEso7aEL9cCOKw_6;
		NI TM__J7BLF9cgvwzEso7aEL9cCOKw_7;
		NU64 index_2 = (NU64)((NU64)(num) * (NU64)(2ULL));
		if ((NU)(next) > (NU)(23)){ raiseIndexError2(next, 23); 		}
		if ((NU)((NU64)((NU64)(index_2) + (NU64)(1ULL))) > (NU)(199)){ raiseIndexError2((NU64)((NU64)(index_2) + (NU64)(1ULL)), 199); 		}
		tmp[(next)- 0] = digits100__stdZprivateZdigitsutils_u2[((NU64)((NU64)(index_2) + (NU64)(1ULL)))- 0];
		if (nimSubInt(next, ((NI)1), &TM__J7BLF9cgvwzEso7aEL9cCOKw_6)) { raiseOverflow(); 		};
		if ((NU)((NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_6)) > (NU)(23)){ raiseIndexError2((NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_6), 23); 		}
		if ((NU)(index_2) > (NU)(199)){ raiseIndexError2(index_2, 199); 		}
		tmp[((NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_6))- 0] = digits100__stdZprivateZdigitsutils_u2[(index_2)- 0];
		if (nimSubInt(next, ((NI)1), &TM__J7BLF9cgvwzEso7aEL9cCOKw_7)) { raiseOverflow(); 		};
		next = (NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_7);
	}
LA3_: ;
	if (nimSubInt(((NI)24), next, &TM__J7BLF9cgvwzEso7aEL9cCOKw_9)) { raiseOverflow(); 	};
	addChars__stdZprivateZdigitsutils_u98((*(&result_p0)), tmp, next, (NI)(TM__J7BLF9cgvwzEso7aEL9cCOKw_9));
}
N_LIB_PRIVATE N_NIMCALL(void, addInt__stdZprivateZdigitsutils_u175)(NimStringV2& result_p0, NU64 x_p1) {
	addIntImpl__stdZprivateZdigitsutils_u55((*(&result_p0)), x_p1);
}
N_LIB_PRIVATE N_NIMCALL(void, addInt__stdZprivateZdigitsutils_u178)(NimStringV2& result_p0, NI64 x_p1) {
	NU64 numX60gensym3_;
	numX60gensym3_ = (NU64)0;
	{
		if (!(x_p1 < IL64(0))) goto LA3_;
{		{
			if (!(x_p1 == (IL64(-9223372036854775807) - IL64(1)))) goto LA7_;
{			numX60gensym3_ = ((NU64) (x_p1));
}		}
		goto LA5_;
LA7_: ;
		{
			if (x_p1 == (IL64(-9223372036854775807) - IL64(1))){ raiseOverflow(); 			}
			numX60gensym3_ = ((NU64) (-(x_p1)));
		}
LA5_: ;
		nimAddCharV1(result_p0, 45);
}	}
	goto LA1_;
LA3_: ;
	{
		numX60gensym3_ = ((NU64) (x_p1));
	}
LA1_: ;
	addInt__stdZprivateZdigitsutils_u175((*(&result_p0)), numX60gensym3_);
}
