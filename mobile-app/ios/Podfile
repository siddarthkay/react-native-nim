require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'nimrnmobileapp' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  # Add our custom Nim bridge module
  pod 'NimBridge', :path => '../modules/nim-bridge'

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # Patch Folly source files to disable coroutines
    folly_expected = File.join(installer.sandbox.root, 'RCT-Folly/folly/Expected.h')
    folly_optional = File.join(installer.sandbox.root, 'RCT-Folly/folly/Optional.h')

    if File.exist?(folly_expected)
      # Make file writable
      system("chmod u+w \"#{folly_expected}\"")
      contents = File.read(folly_expected)
      # Replace #if FOLLY_HAS_COROUTINES with #if 0 to disable the coroutine sections
      contents.gsub!(/#if FOLLY_HAS_COROUTINES/, '#if 0 // FOLLY_HAS_COROUTINES disabled by Podfile patch')
      File.write(folly_expected, contents)
      puts "✅ Patched #{folly_expected} to disable coroutines"
    end

    if File.exist?(folly_optional)
      # Make file writable
      system("chmod u+w \"#{folly_optional}\"")
      contents = File.read(folly_optional)
      # Replace #if FOLLY_HAS_COROUTINES with #if 0 to disable the coroutine sections
      contents.gsub!(/#if FOLLY_HAS_COROUTINES/, '#if 0 // FOLLY_HAS_COROUTINES disabled by Podfile patch')
      File.write(folly_optional, contents)
      puts "✅ Patched #{folly_optional} to disable coroutines"
    end

    # fix for Xcode 16 build issues
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['COMPILER_INDEX_STORE_ENABLE'] = 'NO'
        config.build_settings.delete('MACOSX_DEPLOYMENT_TARGET')
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.1'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        config.build_settings['ENABLE_PREVIEWS'] = 'NO'
        if target.platform_name == :ios
          config.build_settings['VALID_ARCHS'] = 'arm64'
          config.build_settings['ARCHS'] = 'arm64'
        end
      end
    end


    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end
end
