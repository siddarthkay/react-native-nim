/* Generated by Nim Compiler v2.2.0 */
/* Compiled for: iOS, arm64, clang */
/* Command for C compiler:
   clang++ -c -std=gnu++17 -funsigned-char  -pthread -fPIC  -O3 -fno-ident  -fPIC  -I/opt/homebrew/Cellar/nim/2.2.0/nim/lib -I/Users/siddarthkumar/code/siddarthkay/nim-rn-monorepo/nim-core/src -o /Users/siddarthkumar/code/siddarthkay/nim-rn-monorepo/bindings/ios-sim/@m..@s..@s..@s..@s..@s..@s..@sopt@shomebrew@sCellar@snim@s2.2.0@snim@slib@spure@smath.nim.cpp.o /Users/siddarthkumar/code/siddarthkay/nim-rn-monorepo/bindings/ios-sim/@m..@s..@s..@s..@s..@s..@s..@sopt@shomebrew@sCellar@snim@s2.2.0@snim@slib@spure@smath.nim.cpp */
#define NIM_INTBITS 64
#define NIM_EmulateOverflowChecks

#include "nimbase.h"
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
N_LIB_PRIVATE N_NIMCALL(NI, nextPowerOfTwo__pureZmath_u249)(NI x_p0) {
	NI result;
	result = (NI)(x_p0 - ((NI)1));
	result = (NI)(result | (NI)((NI64)(result) >> (NU64)(((NI)32))));
	result = (NI)(result | (NI)((NI64)(result) >> (NU64)(((NI)16))));
	result = (NI)(result | (NI)((NI64)(result) >> (NU64)(((NI)8))));
	result = (NI)(result | (NI)((NI64)(result) >> (NU64)(((NI)4))));
	result = (NI)(result | (NI)((NI64)(result) >> (NU64)(((NI)2))));
	result = (NI)(result | (NI)((NI64)(result) >> (NU64)(((NI)1))));
	result += (NI)(((NI)1) + (x_p0 <= ((NI)0)));
	return result;
}
