/* Generated by Nim Compiler v2.2.0 */
/* Compiled for: iOS, arm64, clang */
/* Command for C compiler:
   clang++ -c -std=gnu++17 -funsigned-char  -pthread -fPIC  -O3 -fno-ident  -fPIC  -I/opt/homebrew/Cellar/nim/2.2.0/nim/lib -I/Users/siddarthkumar/code/siddarthkay/nim-rn-monorepo/nim-core/src -o /Users/siddarthkumar/code/siddarthkay/nim-rn-monorepo/bindings/ios-sim/@mapi@score.nim.cpp.o /Users/siddarthkumar/code/siddarthkay/nim-rn-monorepo/bindings/ios-sim/@mapi@score.nim.cpp */
#define NIM_INTBITS 64
#define NIM_EmulateOverflowChecks

#include "nimbase.h"
#include <exception>
#include <string.h>
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
struct NimStrPayload;
struct NimStringV2;
struct Exception;
struct RootObj;
struct TNimTypeV2;
struct tySequence__U3NvoVpKEobw8JVQGjnwkQ;
struct tySequence__U3NvoVpKEobw8JVQGjnwkQ_Content;
struct tyObject_StackTraceEntry__XJPlpMU9cDRJgRZvaiJYQVA;
struct NimStrPayload {
	NI cap;
	NIM_CHAR data[SEQ_DECL_SIZE];
};
struct NimStringV2 {
	NI len;
	NimStrPayload* p;
};
struct TNimTypeV2 {
	void* destructor;
	NI size;
	NI16 align;
	NI16 depth;
	NU32* display;
	void* traceImpl;
	void* typeInfoV1;
	NI flags;
	void** vTable;
};
struct RootObj {
	TNimTypeV2* m_type;
};
struct tySequence__U3NvoVpKEobw8JVQGjnwkQ {
  NI len; tySequence__U3NvoVpKEobw8JVQGjnwkQ_Content* p;
};
struct Exception : public RootObj {
	Exception* parent;
	NCSTRING name;
	NimStringV2 message;
	tySequence__U3NvoVpKEobw8JVQGjnwkQ trace;
	Exception* up;
};
struct tyObject_StackTraceEntry__XJPlpMU9cDRJgRZvaiJYQVA {
	NCSTRING procname;
	NI line;
	NCSTRING filename;
};
struct tySequence__U3NvoVpKEobw8JVQGjnwkQ_Content { NI cap; tyObject_StackTraceEntry__XJPlpMU9cDRJgRZvaiJYQVA data[SEQ_DECL_SIZE]; };
extern "C" N_LIB_EXPORT N_CDECL(NCSTRING, helloWorld)(void);
extern "C" N_LIB_EXPORT N_CDECL(int, addNumbers)(int a_p0, int b_p1);
static N_INLINE(NIM_BOOL, nimAddInt)(NI a_p0, NI b_p1, NI* res_p2);
N_LIB_PRIVATE N_NOINLINE(void, raiseOverflow)(void);
extern "C" N_LIB_EXPORT N_CDECL(NCSTRING, getSystemInfo)(void);
N_NIMCALL(NimStringV2, rawNewString)(NI cap_p0);
static N_INLINE(void, appendString)(NimStringV2& dest_p0, NimStringV2 src_p1);
static N_INLINE(void, copyMem__system_u1726)(void* dest_p0, void* source_p1, NI size_p2);
static N_INLINE(void, nimCopyMem)(void* dest_p0, void* source_p1, NI size_p2);
N_LIB_PRIVATE N_NOINLINE(void, raiseRangeErrorI)(NI64 i_p0, NI64 a_p1, NI64 b_p2);
N_LIB_PRIVATE N_NIMCALL(void, prepareAdd)(NimStringV2& s_p0, NI addLen_p1);
N_LIB_PRIVATE N_NIMCALL(void, formatValue__apiZcore_u24)(NimStringV2& result_p0, NimStringV2 value_p1);
static N_INLINE(NCSTRING, nimToCStringConv)(NimStringV2 s_p0);
N_LIB_PRIVATE N_NOCONV(void, deallocShared)(void* p_p0);
static const struct {
  NI cap; NIM_CHAR data[4+1];
} TM__67Pf0KKQCE3cSgIGvfOk8A_3 = { 4 | NIM_STRLIT_FLAG, "Nim " };
static const NimStringV2 TM__67Pf0KKQCE3cSgIGvfOk8A_4 = {4, (NimStrPayload*)&TM__67Pf0KKQCE3cSgIGvfOk8A_3};
static const struct {
  NI cap; NIM_CHAR data[5+1];
} TM__67Pf0KKQCE3cSgIGvfOk8A_7 = { 5 | NIM_STRLIT_FLAG, "2.2.0" };
static const NimStringV2 TM__67Pf0KKQCE3cSgIGvfOk8A_8 = {5, (NimStrPayload*)&TM__67Pf0KKQCE3cSgIGvfOk8A_7};
static const struct {
  NI cap; NIM_CHAR data[4+1];
} TM__67Pf0KKQCE3cSgIGvfOk8A_9 = { 4 | NIM_STRLIT_FLAG, " on " };
static const NimStringV2 TM__67Pf0KKQCE3cSgIGvfOk8A_10 = {4, (NimStrPayload*)&TM__67Pf0KKQCE3cSgIGvfOk8A_9};
static const struct {
  NI cap; NIM_CHAR data[3+1];
} TM__67Pf0KKQCE3cSgIGvfOk8A_11 = { 3 | NIM_STRLIT_FLAG, "ios" };
static const NimStringV2 TM__67Pf0KKQCE3cSgIGvfOk8A_12 = {3, (NimStrPayload*)&TM__67Pf0KKQCE3cSgIGvfOk8A_11};
static const struct {
  NI cap; NIM_CHAR data[2+1];
} TM__67Pf0KKQCE3cSgIGvfOk8A_13 = { 2 | NIM_STRLIT_FLAG, " (" };
static const NimStringV2 TM__67Pf0KKQCE3cSgIGvfOk8A_14 = {2, (NimStrPayload*)&TM__67Pf0KKQCE3cSgIGvfOk8A_13};
static const struct {
  NI cap; NIM_CHAR data[5+1];
} TM__67Pf0KKQCE3cSgIGvfOk8A_15 = { 5 | NIM_STRLIT_FLAG, "arm64" };
static const NimStringV2 TM__67Pf0KKQCE3cSgIGvfOk8A_16 = {5, (NimStrPayload*)&TM__67Pf0KKQCE3cSgIGvfOk8A_15};
static const struct {
  NI cap; NIM_CHAR data[1+1];
} TM__67Pf0KKQCE3cSgIGvfOk8A_17 = { 1 | NIM_STRLIT_FLAG, ")" };
static const NimStringV2 TM__67Pf0KKQCE3cSgIGvfOk8A_18 = {1, (NimStrPayload*)&TM__67Pf0KKQCE3cSgIGvfOk8A_17};
N_LIB_EXPORT N_CDECL(NCSTRING, helloWorld)(void) {
	NCSTRING result;
{	result = "Hello from Nim Core! \360\237\216\211";
	goto BeforeRet_;
	}BeforeRet_: ;
	return result;
}
static N_INLINE(NIM_BOOL, nimAddInt)(NI a_p0, NI b_p1, NI* res_p2) {
	NIM_BOOL result;
	result = (NIM_BOOL)0;
	NI r = ((NI) ((NU)((NU64)(((NU) (a_p0))) + (NU64)(((NU) (b_p1))))));
	{
		NIM_BOOL T3_;
		T3_ = (NIM_BOOL)0;
		T3_ = (((NI)0) <= (NI)(r ^ a_p0));
		if (T3_) goto LA4_;
		T3_ = (((NI)0) <= (NI)(r ^ b_p1));
LA4_: ;
		if (!T3_) goto LA5_;
{		(*res_p2) = r;
}	}
	goto LA1_;
LA5_: ;
	{
		result = NIM_TRUE;
	}
LA1_: ;
	return result;
}
N_LIB_EXPORT N_CDECL(int, addNumbers)(int a_p0, int b_p1) {
	int result;
	NI TM__67Pf0KKQCE3cSgIGvfOk8A_2;
{	if (nimAddInt(a_p0, b_p1, &TM__67Pf0KKQCE3cSgIGvfOk8A_2)) { raiseOverflow(); 	};
	if (TM__67Pf0KKQCE3cSgIGvfOk8A_2 < (-2147483647 -1) || TM__67Pf0KKQCE3cSgIGvfOk8A_2 > 2147483647){ raiseOverflow(); 	}
	result = (NI32)(TM__67Pf0KKQCE3cSgIGvfOk8A_2);
	goto BeforeRet_;
	}BeforeRet_: ;
	return result;
}
static N_INLINE(void, nimCopyMem)(void* dest_p0, void* source_p1, NI size_p2) {
	auto T1_ = memcpy(dest_p0, source_p1, ((size_t) (size_p2)));
}
static N_INLINE(void, copyMem__system_u1726)(void* dest_p0, void* source_p1, NI size_p2) {
	nimCopyMem(dest_p0, source_p1, size_p2);
}
static N_INLINE(void, appendString)(NimStringV2& dest_p0, NimStringV2 src_p1) {
	{
		NI TM__67Pf0KKQCE3cSgIGvfOk8A_5;
		NI TM__67Pf0KKQCE3cSgIGvfOk8A_6;
		if (!(((NI)0) < src_p1.len)) goto LA3_;
{		if (nimAddInt(src_p1.len, ((NI)1), &TM__67Pf0KKQCE3cSgIGvfOk8A_5)) { raiseOverflow(); 		};
		if (((NI)(TM__67Pf0KKQCE3cSgIGvfOk8A_5)) < ((NI)0) || ((NI)(TM__67Pf0KKQCE3cSgIGvfOk8A_5)) > ((NI)IL64(9223372036854775807))){ raiseRangeErrorI((NI)(TM__67Pf0KKQCE3cSgIGvfOk8A_5), ((NI)0), ((NI)IL64(9223372036854775807))); 		}
		copyMem__system_u1726(((void*) ((&(*dest_p0.p).data[dest_p0.len]))), ((void*) ((&(*src_p1.p).data[((NI)0)]))), ((NI)(TM__67Pf0KKQCE3cSgIGvfOk8A_5)));
		if (nimAddInt(dest_p0.len, src_p1.len, &TM__67Pf0KKQCE3cSgIGvfOk8A_6)) { raiseOverflow(); 		};
		dest_p0.len = (NI)(TM__67Pf0KKQCE3cSgIGvfOk8A_6);
}	}
LA3_: ;
}
static N_INLINE(NCSTRING, nimToCStringConv)(NimStringV2 s_p0) {
	NCSTRING result;
	{
		if (!(s_p0.len == ((NI)0))) goto LA3_;
{		result = "";
}	}
	goto LA1_;
LA3_: ;
	{
		result = ((NCSTRING) ((*s_p0.p).data));
	}
LA1_: ;
	return result;
}
N_LIB_EXPORT N_CDECL(NCSTRING, getSystemInfo)(void) {
	NCSTRING result;
	NimStringV2 info;
	std::exception_ptr T2_;
	NimStringV2 T3_;
{	result = (NCSTRING)0;
	info.len = 0; info.p = NIM_NIL;
	try {
	T3_.len = 0; T3_.p = NIM_NIL;
	{
		NimStringV2 fmtRes;
		fmtRes.len = 0; fmtRes.p = NIM_NIL;
		fmtRes = rawNewString(((NI)70));
		prepareAdd(fmtRes, 4);
appendString(fmtRes, TM__67Pf0KKQCE3cSgIGvfOk8A_4);
		formatValue__apiZcore_u24((*(&fmtRes)), TM__67Pf0KKQCE3cSgIGvfOk8A_8);
		prepareAdd(fmtRes, 4);
appendString(fmtRes, TM__67Pf0KKQCE3cSgIGvfOk8A_10);
		formatValue__apiZcore_u24((*(&fmtRes)), TM__67Pf0KKQCE3cSgIGvfOk8A_12);
		prepareAdd(fmtRes, 2);
appendString(fmtRes, TM__67Pf0KKQCE3cSgIGvfOk8A_14);
		formatValue__apiZcore_u24((*(&fmtRes)), TM__67Pf0KKQCE3cSgIGvfOk8A_16);
		prepareAdd(fmtRes, 1);
appendString(fmtRes, TM__67Pf0KKQCE3cSgIGvfOk8A_18);
		info = fmtRes;
	}
	result = nimToCStringConv(info);
	if (info.p && !(info.p->cap & NIM_STRLIT_FLAG)) {
 deallocShared(info.p);
}
	goto BeforeRet_;
	}
	catch (Exception* T3_) {
	T2_ = std::current_exception();
	}
	catch (...) {
		T2_ = std::current_exception();
	}
	{
		if (info.p && !(info.p->cap & NIM_STRLIT_FLAG)) {
 deallocShared(info.p);
}
		if (T2_) std::rethrow_exception(T2_);
	}
	}BeforeRet_: ;
	return result;
}
