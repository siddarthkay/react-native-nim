// Auto-generated JNI C++ bridge for Android
// DO NOT EDIT MANUALLY - Generated by tools/generate_bindings.py
// This file will be overwritten when bindings are regenerated

#include <jni.h>
#include <string>

// Import the Nim functions
extern "C" {
    const char* helloWorld();
    int addNumbers(int a, int b);
    const char* getSystemInfo();
    long long mobileFibonacci(int n);
    int mobileIsPrime(int n);
    const char* mobileFactorize(int n);
    const char* mobileCreateUser(int id, const char* name, const char* email);
    int mobileValidateEmail(const char* email);
    const char* getNimCoreVersion();
    void mobileNimInit();
    void mobileNimShutdown();
    void freeString(const char* s);
}

// Initialize Nim when the library loads
static bool nimInitialized = false;

void initializeNim() {
    if (!nimInitialized) {
        mobileNimInit();
        nimInitialized = true;
    }
}

extern "C" JNIEXPORT jstring JNICALL
Java_com_nimbridge_NimBridgeModule_nativeHelloWorld(JNIEnv *env, jclass clazz) {
    initializeNim();
    const char* result = helloWorld();
    return env->NewStringUTF(result);
}

extern "C" JNIEXPORT jint JNICALL
Java_com_nimbridge_NimBridgeModule_nativeAddNumbers(JNIEnv *env, jclass clazz, jint a, jint b) {
    initializeNim();
    int result = addNumbers(a, b);
    return result;
}

extern "C" JNIEXPORT jstring JNICALL
Java_com_nimbridge_NimBridgeModule_nativeGetSystemInfo(JNIEnv *env, jclass clazz) {
    initializeNim();
    const char* result = getSystemInfo();
    jstring javaString = env->NewStringUTF(result);
    if (result) freeString(result);
    return javaString;
}

extern "C" JNIEXPORT jlong JNICALL
Java_com_nimbridge_NimBridgeModule_nativeMobileFibonacci(JNIEnv *env, jclass clazz, jint n) {
    initializeNim();
    long long result = mobileFibonacci(n);
    return (jlong)result;
}

extern "C" JNIEXPORT jint JNICALL
Java_com_nimbridge_NimBridgeModule_nativeMobileIsPrime(JNIEnv *env, jclass clazz, jint n) {
    initializeNim();
    int result = mobileIsPrime(n);
    return result;
}

extern "C" JNIEXPORT jstring JNICALL
Java_com_nimbridge_NimBridgeModule_nativeMobileFactorize(JNIEnv *env, jclass clazz, jint n) {
    initializeNim();
    const char* result = mobileFactorize(n);
    jstring javaString = env->NewStringUTF(result);
    if (result) freeString(result);
    return javaString;
}

extern "C" JNIEXPORT jstring JNICALL
Java_com_nimbridge_NimBridgeModule_nativeMobileCreateUser(JNIEnv *env, jclass clazz, jint id, jstring name, jstring email) {
    initializeNim();
    const char* nameStr = env->GetStringUTFChars(name, 0);
    const char* emailStr = env->GetStringUTFChars(email, 0);
    const char* result = mobileCreateUser(id, nameStr, emailStr);
    jstring javaString = env->NewStringUTF(result);
    if (result) freeString(result);
    return javaString;
    env->ReleaseStringUTFChars(name, nameStr);
    env->ReleaseStringUTFChars(email, emailStr);
}

extern "C" JNIEXPORT jint JNICALL
Java_com_nimbridge_NimBridgeModule_nativeMobileValidateEmail(JNIEnv *env, jclass clazz, jstring email) {
    initializeNim();
    const char* emailStr = env->GetStringUTFChars(email, 0);
    int result = mobileValidateEmail(emailStr);
    return result;
    env->ReleaseStringUTFChars(email, emailStr);
}

extern "C" JNIEXPORT jstring JNICALL
Java_com_nimbridge_NimBridgeModule_nativeGetNimCoreVersion(JNIEnv *env, jclass clazz) {
    initializeNim();
    const char* result = getNimCoreVersion();
    return env->NewStringUTF(result);
}

